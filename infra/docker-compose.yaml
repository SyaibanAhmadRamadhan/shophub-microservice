version: '3.8'

services:
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
      - tempo
    logging:
      driver: "json-file"
      options:
        max-size: "10m"       
        max-file: "3"         

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./conf/grafana/prometheus.yaml:/etc/prometheus/prometheus.yaml
    logging:
      driver: "json-file"
      options:
        max-size: "10m"       
        max-file: "3"         

  loki:
    image: grafana/loki:latest
    # ports:
      # - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./conf/grafana/loki-config.yaml:/etc/loki/local-config.yaml
    logging:
      driver: "json-file"
      options:
        max-size: "10m"       
        max-file: "3"         

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./conf/grafana/tempo.yaml:/etc/tempo.yaml

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    ports:
      - "12345:12345" # Alloy HTTP server port (metrics/status, optional)
      - "4317:4317" # Alloy gRPC server port (traces, optional)
    volumes:
      - ./conf/grafana/config.alloy:/etc/alloy/config.alloy
    command: [
        "run",
        "--server.http.listen-addr=0.0.0.0:12345",
        "--storage.path=/var/lib/alloy/data",
        "/etc/alloy/config.alloy"
    ]
    depends_on:
      - tempo

  # proxy
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
      - "3100:3100"
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./conf/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./conf/nginx/htpasswdloki:/etc/nginx/.htpasswd
    depends_on:
      - loki

  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 9991:9991
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ZOOKEEPER_SASL_ENABLED: 'false'
      # KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      # KAFKA_ADVERTISED_LISTENERS: EXTERNAL://kafka:29092,INTERNAL://localhost:9092
      # KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: SASL_PLAINTEXT:SASL_PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://kafka:9092
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SASL_PLAINTEXT
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka-config/kafka_server_jaas.conf"

      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_COMMAND_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka-config:/etc/kafka/kafka-config

  # debezium
  connect:
    image: debezium/connect:2.4.0.Final
    depends_on:
      - kafka
    ports:
      - 8083:8083
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      REST_ADVERTISED_HOST_NAME: connect
      REST_PORT: 8083
      GROUP_ID: compose-connect-group
      CONFIG_STORAGE_TOPIC: docker-connect-configs
      OFFSET_STORAGE_TOPIC: docker-connect-offsets
      STATUS_STORAGE_TOPIC: docker-connect-status
      KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1

      # SASL authentication
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka-config/kafka_connect_jaas.conf"
      CONNECT_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_SASL_MECHANISM: PLAIN
      CONNECT_SASL_JAAS_CONFIG: 'org.apache.kafka.common.security.plain.PlainLoginModule required username="kafka" password="pass12345";'
    volumes:
      - ./kafka-config:/etc/kafka/kafka-config

  # rabbitmq
  nats:
    image: nats:latest
    ports:
      - "4222:4222"  # Client connection
      - "8222:8222"  # Monitoring interface
    volumes:
      - ./conf/nats.conf:/etc/nats/nats.conf
    command: -c /etc/nats/nats.conf

  debezium-server-order-service:
    image: quay.io/debezium/server:3.1.2.Final
    volumes:
      - ./debezium/order-service-conf/application.properties:/debezium/config/application.properties
      - ./debezium/order-service-conf/data:/debezium/data
    depends_on:
      - order_service
      - nats

  debezium-server-payment-service:
    image: quay.io/debezium/server:3.1.2.Final
    volumes:
      - ./debezium/payment-service-conf/application.properties:/debezium/config/application.properties
      - ./debezium/payment-service-conf/data:/debezium/data
    depends_on:
      - payment_service
      - nats
  
  debezium-server-shipment-service:
    image: quay.io/debezium/server:3.1.2.Final
    volumes:
      - ./debezium/shipment-service-conf:/debezium/config
      - ./debezium/shipment-service-conf/data:/debezium/data
    depends_on:
      - shipment_service
      - nats
  
  debezium-server-product-service:
    image: quay.io/debezium/server:3.1.2.Final
    volumes:
      - ./debezium/product-service-conf/application.properties:/debezium/config/application.properties
      - ./debezium/product-service-conf/data:/debezium/data
    depends_on:
      - product_service
      - nats

  # database
  user_service:
    image: debezium/postgres:16-alpine
    ports:
      - 5433:5432
    environment:
      POSTGRES_DB: user_service_db
      POSTGRES_USER: user_service_user
      POSTGRES_PASSWORD: user_service_pass
    volumes:
      - user_service_data:/var/lib/postgresql/data
  
  product_service:
    image: debezium/postgres:16-alpine
    ports:
      - 5434:5432
    environment:
      POSTGRES_DB: product_service_db
      POSTGRES_USER: product_service_user
      POSTGRES_PASSWORD: product_service_pass
    volumes:
      - product_service_data:/var/lib/postgresql/data

  order_service:
    image: debezium/postgres:16-alpine
    ports:
      - 5435:5432
    environment:
      POSTGRES_DB: order_service_db
      POSTGRES_USER: order_service_user
      POSTGRES_PASSWORD: order_service_pass
    volumes:
      - order_service_data:/var/lib/postgresql/data

  payment_service:
    image: debezium/postgres:16-alpine
    ports:
      - 5436:5432
    environment:
      POSTGRES_DB: payment_service_db
      POSTGRES_USER: payment_service_user
      POSTGRES_PASSWORD: payment_service_pass
    volumes:
      - payment_service_data:/var/lib/postgresql/data

  shipment_service:
    image: debezium/postgres:16-alpine
    ports:
      - 5437:5432
    environment:
      POSTGRES_DB: shipment_service_db
      POSTGRES_USER: shipment_service_user
      POSTGRES_PASSWORD: shipment_service_pass
    volumes:
      - shipment_service_data:/var/lib/postgresql/data

volumes:
  grafana-storage:
  user_service_data:
  product_service_data:
  order_service_data:
  payment_service_data:
  shipment_service_data:
  rmqdata: